within Dynawo.Examples.GridFollowing;

model SingleVSC
import Dynawo;
import Modelica;

  Dynawo.Examples.GridFollowing.InitSingleVSC SingleVSC_INIT;

  Dynawo.Electrical.Sources.ConverterGFL converterGFL(
  SNom = SingleVSC_INIT.SNom,
  R = SingleVSC_INIT.R,
  L = SingleVSC_INIT.L,
  Rc = SingleVSC_INIT.Rc,
  Xc = SingleVSC_INIT.Xc,
  ratioTr= SingleVSC_INIT.ratioTr,
  omegaNom= SingleVSC_INIT.omegaNom,
  omegaPLL0Pu= SingleVSC_INIT.omegaPLL0Pu,
  thetaPLL0Pu= SingleVSC_INIT.thetaPLL0Pu,
  PGen0Pu = SingleVSC_INIT.PGen0Pu,
  QGen0Pu = SingleVSC_INIT.QGen0Pu,
  uPcc0Pu = SingleVSC_INIT.uPcc0Pu,
  iPcc0Pu=SingleVSC_INIT.iPcc0Pu,
  uConv0Pu=SingleVSC_INIT.uConv0Pu,
  UConv0Pu= SingleVSC_INIT.UConv0Pu,
  idPcc0Pu=SingleVSC_INIT.idPcc0Pu,
  iqPcc0Pu=SingleVSC_INIT.iqPcc0Pu,
  udPcc0Pu=SingleVSC_INIT.udPcc0Pu,
  uqPcc0Pu=SingleVSC_INIT.uqPcc0Pu,
  idConv0Pu=SingleVSC_INIT.idConv0Pu,
  iqConv0Pu=SingleVSC_INIT.iqConv0Pu) annotation(
    Placement(visible = true, transformation(origin = {0, 20}, extent = {{-12, -12}, {12, 12}}, rotation = 0)));

  Dynawo.Electrical.Controls.Converters.GridFollowingControl gridFollowingControl(
  ImaxPu = SingleVSC_INIT.ImaxPu,
  IqmaxPu = SingleVSC_INIT.IqmaxPu,
  Kic = SingleVSC_INIT.Kic,
  Kip = SingleVSC_INIT.Kip,
  Kiv = SingleVSC_INIT.Kiv,
  Kpc = SingleVSC_INIT.Kpc,
  Kpp = SingleVSC_INIT.Kpp,
  Kpv = SingleVSC_INIT.Kpv,
  L = SingleVSC_INIT.L,
  Xc = SingleVSC_INIT.Xc,
  R = SingleVSC_INIT.R,
  Rc = SingleVSC_INIT.Rc,
  Snom =SingleVSC_INIT.SNom,
  T = SingleVSC_INIT.T,
  Tlpf = SingleVSC_INIT.Tlpf,
  Tpll = SingleVSC_INIT.Tpll,
  Vpllb = SingleVSC_INIT.Vpllb,
  Vpllu = SingleVSC_INIT.Vpllu,
  Vs1 = SingleVSC_INIT.Vs1,
  Vs2 = SingleVSC_INIT.Vs2,
  didt_max = SingleVSC_INIT.didt_max,
  didt_min = SingleVSC_INIT.didt_min,
  ratioTr = SingleVSC_INIT.ratioTr,
  VQControlFlag=SingleVSC_INIT.VQControlFlag,
  uPcc0Pu=SingleVSC_INIT.uPcc0Pu,
  omegaNom=SingleVSC_INIT.omegaNom,
  omegaRef0Pu=SingleVSC_INIT.omegaRef0Pu,
  omegaPLL0Pu= SingleVSC_INIT.omegaPLL0Pu,
  thetaPLL0Pu=SingleVSC_INIT.thetaPLL0Pu,
  PGenRef0Pu=SingleVSC_INIT.PGenRef0Pu,
  PGen0Pu=SingleVSC_INIT.PGen0Pu,
  QGenRef0Pu=SingleVSC_INIT.QGenRef0Pu,
  QGen0Pu=SingleVSC_INIT.QGen0Pu,
  uConv0Pu=SingleVSC_INIT.uConv0Pu,
  UConvRef0Pu=SingleVSC_INIT.UConvRef0Pu,
  UConv0Pu=SingleVSC_INIT.UConv0Pu,
  idConv0Pu=SingleVSC_INIT.idConv0Pu,
  iqConv0Pu=SingleVSC_INIT.iqConv0Pu,
  udPcc0Pu=SingleVSC_INIT.udPcc0Pu,
  uqPcc0Pu=SingleVSC_INIT.uqPcc0Pu,
  IP0Pu= SingleVSC_INIT.IP0Pu,
  InomPu=SingleVSC_INIT.InomPu,
  KpPLL= SingleVSC_INIT.KpPLL,
  KiPLL=SingleVSC_INIT.KiPLL) annotation(
    Placement(visible = true, transformation(origin = {-46, 20}, extent = {{-12, -12}, {12, 12}}, rotation = 0)));

  Dynawo.Electrical.Buses.InfiniteBusWithImpedance infiniteBusWithImpedance(
  RPu = SingleVSC_INIT.RInfPu,
  UBus0Pu = SingleVSC_INIT.UBus0Pu,
  UPhaseBus0 = SingleVSC_INIT.UPhaseBus0,
  XPu = SingleVSC_INIT.XInfPu,
  iTerminal0Pu = SingleVSC_INIT.iTerminal0Pu,
  uTerminal0Pu = SingleVSC_INIT.uTerminal0Pu) annotation(
    Placement(visible = true, transformation(origin = {88, 20}, extent = {{-20, -20}, {20, 20}}, rotation = 270)));
  
  Dynawo.Electrical.Lines.Line line(
  BPu = SingleVSC_INIT.BLinePu,
  GPu = SingleVSC_INIT.GLinePu,
  RPu = SingleVSC_INIT.RLinePu,
  XPu = SingleVSC_INIT.XLinePu) annotation(
    Placement(visible = true, transformation(origin = {48, 20}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));


  Modelica.Blocks.Sources.Constant omegaRefPu(k = SingleVSC_INIT.omegaRef0Pu) annotation(
    Placement(visible = true, transformation(origin = {-111, 94}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Constant PGenRefPu(k = SingleVSC_INIT.PGenRef0Pu) "Reference Active power generated by the converter at the PCC in pu (base UNom, SnRef)" annotation(
    Placement(visible = true, transformation(origin = {-111, 64}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  
  Modelica.Blocks.Sources.BooleanConstant VQControlFlag(k = SingleVSC_INIT.VQControlFlag) "Boolean signal for control strategy: true voltage control, false reactive power control" annotation(
    Placement(visible = true, transformation(origin = {-111, 23}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  
  Modelica.Blocks.Sources.Constant QGenRefPu(k = SingleVSC_INIT.QGenRef0Pu) "Reference Reactive power generated by the converter at the PCC in pu (base UNom, SnRef)" annotation(
    Placement(visible = true, transformation(origin = {-109, -8}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  
  Modelica.Blocks.Sources.Constant UConvRefPu(k = SingleVSC_INIT.UConvRef0Pu) "Reference voltage at the converter's terminals in pu (base UNom)" annotation(
    Placement(visible = true, transformation(origin = {-110, -42}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));

equation
  line.switchOffSignal1.value = false;
  line.switchOffSignal2.value = false;
  connect(gridFollowingControl.uqConvRefPu, converterGFL.uqConvRefPu) annotation(
    Line(points = {{-33, 10}, {-13, 10}}, color = {0, 0, 127}));
  connect(converterGFL.terminal, line.terminal1) annotation(
    Line(points = {{13, 20}, {28, 20}}, color = {0, 0, 255}));
  connect(gridFollowingControl.omegaPLLPu, converterGFL.omegaPLLPu) annotation(
    Line(points = {{-33, 30}, {-13, 30}}, color = {0, 0, 127}));
  connect(gridFollowingControl.udConvRefPu, converterGFL.udConvRefPu) annotation(
    Line(points = {{-33, 16}, {-13, 16}}, color = {0, 0, 127}));
  connect(converterGFL.udPccPu, gridFollowingControl.udPccPu) annotation(
    Line(points = {{6, 33}, {6, 42.4}, {-42, 42.4}, {-42, 33}}, color = {0, 0, 127}));
  connect(converterGFL.uqPccPu, gridFollowingControl.uqPccPu) annotation(
    Line(points = {{-6, 33}, {-6, 38.4}, {-38, 38.4}, {-38, 33}}, color = {0, 0, 127}));
  connect(converterGFL.uPccPu, gridFollowingControl.uPccPu) annotation(
    Line(points = {{13, 15}, {13, 16.35}, {29, 16.35}, {29, 60.4}, {-54, 60.4}, {-54, 33}}, color = {85, 170, 255}));
  connect(gridFollowingControl.thetaPLLPu, converterGFL.thetaPLLPu) annotation(
    Line(points = {{-33, 24}, {-13, 24}}, color = {0, 0, 127}));
  connect(gridFollowingControl.PGenPu, converterGFL.PGenPu) annotation(
    Line(points = {{-59, 27}, {-68.2, 27}, {-68.2, 50.2}, {17.8, 50.2}, {17.8, 30}, {13, 30}}, color = {0, 0, 127}));
  connect(gridFollowingControl.QGenPu, converterGFL.QGenPu) annotation(
    Line(points = {{-59, 16}, {-71.2, 16}, {-71.2, 54.4}, {22.8, 54.4}, {22.8, 25}, {13, 25}}, color = {0, 0, 127}));
  connect(line.terminal2, infiniteBusWithImpedance.terminal) annotation(
    Line(points = {{68, 20}, {88, 20}}, color = {0, 0, 255}));
  connect(PGenRefPu.y, gridFollowingControl.PGenRefPu) annotation(
    Line(points = {{-111, 64}, {-78, 64}, {-78, 31}, {-59, 31}}, color = {0, 0, 127}));
  connect(QGenRefPu.y, gridFollowingControl.QGenRefPu) annotation(
    Line(points = {{-109, -8}, {-74, -8}, {-74, 20}, {-59, 20}}, color = {0, 0, 127}));
  connect(UConvRefPu.y, gridFollowingControl.UConvRefPu) annotation(
    Line(points = {{-110, -42}, {-80, -42}, {-80, 13}, {-59, 13}}, color = {0, 0, 127}));
  connect(omegaRefPu.y, gridFollowingControl.omegaRefPu) annotation(
    Line(points = {{-100, 94}, {-50, 94}, {-50, 34}}, color = {0, 0, 127}));
  connect(VQControlFlag.y, gridFollowingControl.VQControlSwicth) annotation(
    Line(points = {{-100, 23}, {-60, 23}, {-60, 24}}, color = {255, 0, 255}));
  connect(gridFollowingControl.iqConvPu, converterGFL.iqConvPu) annotation(
    Line(points = {{-38, 6}, {-38, 0}, {6, 0}, {6, 7}}, color = {0, 0, 127}));
  connect(converterGFL.idConvPu, gridFollowingControl.idConvPu) annotation(
    Line(points = {{-6, 7}, {-6, -4}, {-42, -4}, {-42, 6}}, color = {0, 0, 127}));
  connect(converterGFL.iPccPu, gridFollowingControl.iPccPu) annotation(
    Line(points = {{14, 10}, {30, 10}, {30, -20}, {-54, -20}, {-54, 6}}, color = {85, 170, 255}));
  connect(converterGFL.UConvPu, gridFollowingControl.UConvPu) annotation(
    Line(points = {{14, 8}, {20, 8}, {20, -26}, {-64, -26}, {-64, 10}, {-60, 10}}, color = {0, 0, 127}));
  annotation(
    Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}})));

end SingleVSC;
